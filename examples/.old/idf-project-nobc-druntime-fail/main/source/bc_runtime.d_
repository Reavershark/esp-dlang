/// Mini runtime for D -betterC
module bc_runtime;

/// Required for the legacy ModuleInfo discovery mechanism
extern(C) __gshared void* _Dmodule_ref;

///            ///
// new operator //
///            ///

private extern(C) void* malloc(size_t size);


// We define the static TypeInfo instance references 
static assert(size_t.sizeof == (void*).sizeof);
private enum string TIMangle(string middle) = "_D10TypeInfo_" ~ middle ~ "6__initZ";

static assert(int.sizeof == uint.sizeof);
pragma(mangle, "_D10TypeInfo_i6__initZ")
extern(C) static __gshared size_t tsize_int = int.sizeof;

class TypeInfo_h : TypeInfoGeneric!ubyte {}
class TypeInfo_b : TypeInfoGeneric!(bool, ubyte) {}
class TypeInfo_g : TypeInfoGeneric!(byte, ubyte) {}
class TypeInfo_a : TypeInfoGeneric!(char, ubyte) {}
class TypeInfo_t : TypeInfoGeneric!ushort {}
class TypeInfo_s : TypeInfoGeneric!(short, ushort) {}
class TypeInfo_u : TypeInfoGeneric!(wchar, ushort) {}
class TypeInfo_w : TypeInfoGeneric!(dchar, uint) {}
class TypeInfo_k : TypeInfoGeneric!uint {}
class TypeInfo_i : TypeInfoGeneric!(int, uint) {}
class TypeInfo_m : TypeInfoGeneric!ulong {}
class TypeInfo_l : TypeInfoGeneric!(long, ulong) {}

/**
 * for allocating a single POD value
 */
extern(C) void* _d_allocmemoryT(size_t tsize)
{
    return malloc(tsize);
}

///     ///
// notes //
///     ///

// destroy() is a template in object.d, so it just works

/+
extern(C) void _d_array_slice_copy(void* dst, size_t dstlen, void* src, size_t srclen, size_t elemsz)
{
    import ldc.intrinsics : llvm_memcpy;
    llvm_memcpy!size_t(dst, src, dstlen * elemsz, 0);
}
+/

/+
extern(C)
void __assert_func(const(char)*, int, const(char)*, const(char)*) @nogc nothrow;

extern(C)
void _d_assert(string file, uint line)
{
    __assert_func("some file\0".ptr, line, "arg2\0".ptr, "arg3\0".ptr);
}

/**
 * A callback for assert errors in D.  The user-supplied assert handler will
 * be called if one has been supplied, otherwise an $(LREF AssertError) will be
 * thrown.
 *
 * Params:
 *  file = The name of the file that signaled this error.
 *  line = The line number on which this error occurred.
 */
extern (C) void onAssertError( string file = __FILE__, size_t line = __LINE__ ) nothrow
{
    throw staticError!AssertError(file, line);
}


/**
 * A callback for assert errors in D.  The user-supplied assert handler will
 * be called if one has been supplied, otherwise an $(LREF AssertError) will be
 * thrown.
 *
 * Params:
 *  file = The name of the file that signaled this error.
 *  line = The line number on which this error occurred.
 *  msg  = An error message supplied by the user.
 */
extern (C) void onAssertErrorMsg( string file, size_t line, string msg ) nothrow
{
    throw staticError!AssertError(msg, file, line);
}


// only Errors for now as those are rarely chained
package T staticError(T, Args...)(auto ref Args args)
    if (is(T : Error))
{
    // pure hack, what we actually need is @noreturn and allow to call that in pure functions
    static T get()
    {
        static assert(__traits(classInstanceSize, T) <= _store.length,
                      T.stringof ~ " is too large for staticError()");

        version (LDC_Windows)
            auto store = &getStore();
        else
            auto store = &_store;

        return cast(T) store.ptr;
    }
    auto res = (cast(T function() @trusted pure nothrow @nogc) &get)();
    import core.lifetime : emplace;
    emplace(res, args);
    return res;
}

/**
 * Thrown on an assert error.
 */
class AssertError : Error
{
    @safe pure nothrow @nogc this( string file, size_t line )
    {
        this(cast(Throwable)null, file, line);
    }

    @safe pure nothrow @nogc this( Throwable next, string file = __FILE__, size_t line = __LINE__ )
    {
        this( "Assertion failure", file, line, next);
    }

    @safe pure nothrow @nogc this( string msg, string file = __FILE__, size_t line = __LINE__, Throwable next = null )
    {
        super( msg, file, line, next );
    }
}
+/

/+
// TLS storage shared for all errors, chaining might create circular reference
private align(2 * size_t.sizeof) void[256] _store;
+/
